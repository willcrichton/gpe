{"name":"Genetic Polygon Encoding","tagline":"Image compression via polygons and genetic algorithms","body":"## Checkpoint 1\r\n\r\nI'm going to preface this by saying the past two weeks have been utter hell--I've been working from morning to midnight every day trying to finish compilers, do algo, and keep up with interviews and other commitments. By the end of this week, L5 will be done for compilers, and life settles down a bit since interview season is over. Hence, I don't have too much to show for checkpoint 1, but I will work twice as hard before the next checkpoint to stay on schedule.\r\n\r\nThat said, I have a basic Rust system that accepts an image off the command line, parses it, and I have a polygon renderer. I still need to find a way to render polygons with a gradient--this means writing my own polygon renderer instead of using a prebuilt GL-based one. \r\n\r\nThe schedule remains the same--I will have a basic genetic algorithm and a .gpe output file by the end of next week. Likewise, the anticipated deliverable remains the same: I'll have a ready-to-go image compressor and .gpe renderer to show off. If I have time, I'll also build a tool that lets you visualize the population of the genetic algorithm after each iteration.\r\n\r\n## Proposal\r\n\r\n### Summary\r\nI will create a novel lossy image compression algorithm/format which decomposes an image into a small number of polygons using a genetic algorithm.\r\n\r\n### Background\r\nRoger Alsing showed in 2008 the possibility of [representing images with polygons](http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa/). He applied a genetic algorithm which randomly generates polygons and uses a stochastic selection process to prefer images closest to the one we want to generate. I want to extend this work to both a) be suitable as a new image format and b) generate optimal images as fast as possible.\r\n\r\n### Challenges\r\nFirstly, as far as I can tell, this space hasn't been explored beyond the above blog post and subsequent discussion the topic. There are no references on optimal genetic algorithms for mapping polygons to images. I've dealt in neither genetic algorithms nor image compression before, so I'll have to explore ways to optimize both.\r\n\r\n### Resources\r\nI'll just be using my own machine for the work. If it's suitable, I will draw from the Alsing codebase to provide a starting point for my compression algorithm. I will continue to explore the research space to find other genetic compression algorithms and see if they use any ideas applicable to my project.\r\n\r\n### Goals\r\n**Plan to Achieve**\r\n* Optimize the Alsing algorithm to find better reconstructions faster. Alsing only explored this space in brief, so I think there's definitely room for more work.\r\n* Create a new file format for my compressed images that achieves at least a 2x reduction in size over JPEG without a significant loss in comparative quality. \r\n\r\n**Hope to Achieve**\r\n* Reduce compression times to something actually usable by a consumer.\r\n* Achieve quality greater than or equal to JPEG without trading compression.\r\n\r\n### Schedule\r\n* Friday, November 14: have basic algorithm up and running, i.e. converting the Alsing algorithm to Rust.\r\n* Friday, November 21: compressed image format is done, and images are being saved to .gpe.\r\n* Monday, December 1: research is done and genetic algorithm is as optimized as possible for correctness.\r\n* Monday, December 8: algorithm is further optimized for speed, and benchmarks are created. Rest of the time is spent running tests and doing writeup.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}